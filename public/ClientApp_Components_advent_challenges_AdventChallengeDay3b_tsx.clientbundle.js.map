{"version":3,"file":"ClientApp_Components_advent_challenges_AdventChallengeDay3b_tsx.clientbundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;;AAMA,SAASE,oBAAT,GAAgC;AAC9B,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CACzBC,SADyB,EAEzBC,UAFyB,EAId;AAAA,QADXC,YACW,uEADY,EACZ;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ,EAAuBC,UAAvB,EAAmCC,YAAnC;;AAEA,QAAIF,SAAS,CAACK,MAAV,IAAoB,CAAxB,EAA2B;AACzBH,MAAAA,YAAY,IAAIF,SAAS,CAAC,CAAD,CAAzB;AACA,aAAOE,YAAP;AACD;;AAED,QAAMI,OAAiB,GAAG,EAA1B;AACA,QAAMC,MAAgB,GAAG,EAAzB;AACAP,IAAAA,SAAS,CAACQ,GAAV,CAAc,UAACC,KAAD,EAAQC,KAAR,EAAkB;AAC9BD,MAAAA,KAAK,CAACE,UAAN,CAAiB,GAAjB,IAAwBL,OAAO,CAACM,IAAR,CAAaH,KAAb,CAAxB,GAA8CF,MAAM,CAACK,IAAP,CAAYH,KAAZ,CAA9C;AACD,KAFD;;AAIA,QACGR,UAAU,KAAK,IAAf,IAAuBM,MAAM,CAACF,MAAP,IAAiBC,OAAO,CAACD,MAAjD,IACCJ,UAAU,KAAK,KAAf,IAAwBM,MAAM,CAACF,MAAP,GAAgBC,OAAO,CAACD,MAFnD,EAGE;AACAH,MAAAA,YAAY,IAAI,GAAhB;AACA,aAAOH,kBAAkB,CACvBQ,MAAM,CAACC,GAAP,CAAW,UAACC,KAAD;AAAA,eAAWA,KAAK,CAACI,SAAN,CAAgB,CAAhB,CAAX;AAAA,OAAX,CADuB,EAEvBZ,UAFuB,EAGvBC,YAHuB,CAAzB;AAKD;;AAEDA,IAAAA,YAAY,IAAI,GAAhB;AACA,WAAOH,kBAAkB,CACvBO,OAAO,CAACE,GAAR,CAAY,UAACC,KAAD;AAAA,aAAWA,KAAK,CAACI,SAAN,CAAgB,CAAhB,CAAX;AAAA,KAAZ,CADuB,EAEvBZ,UAFuB,EAGvBC,YAHuB,CAAzB;AAKD,GApCD;;AAsCA,MAAMY,WAAW,GAAG,SAAdA,WAAc,CAACd,SAAD,EAAyB;AAC3C,QAAMe,qBAAqB,GAAGhB,kBAAkB,CAACC,SAAD,EAAY,IAAZ,CAAhD;AACA,QAAMgB,iBAAiB,GAAGjB,kBAAkB,CAACC,SAAD,EAAY,KAAZ,CAA5C;AACA,QAAMiB,MAAM,GACVC,QAAQ,CAACH,qBAAD,EAAwB,CAAxB,CAAR,GAAqCG,QAAQ,CAACF,iBAAD,EAAoB,CAApB,CAD/C;AAEA,WAAO,CACLE,QAAQ,CAACH,qBAAD,EAAwB,CAAxB,CADH,EAELG,QAAQ,CAACF,iBAAD,EAAoB,CAApB,CAFH,EAGLC,MAHK,CAAP;AAKD,GAVD;;AAWA,qBACEH,WAAW,CAACjB,kEAAD,CADb;AAAA;AAAA,MAAOkB,qBAAP;AAAA,MAA8BC,iBAA9B;AAAA,MAAiDC,MAAjD;;AAEA,sBACE;AAAK,aAAS,EAAC;AAAf,kBACE;AAAK,aAAS,EAAC;AAAf,kBACE;AAAI,aAAS,EAAC;AAAd,sBADF,eAEE;AAAK,aAAS,EAAC;AAAf,kBACE;AAAG,aAAS,EAAC;AAAb,KAA+BpB,uEAAA,CAAoB,IAApB,CAA/B,CADF,CAFF,CADF,eAOE;AAAK,aAAS,EAAC;AAAf,kBACE;AAAI,aAAS,EAAC;AAAd,yBADF,eAEE;AAAK,aAAS,EAAC;AAAf,kBACE;AAAG,aAAS,EAAC;AAAb,KACG,GADH,sCAEmCkB,qBAFnC,0CAG2BC,iBAH3B,+BAGuE,GAHvE,EAIGC,MAJH,MADF,CAFF,CAPF,eAkBE;AAAK,aAAS,EAAC;AAAf,kBACE;AAAI,aAAS,EAAC;AAAd,aADF,eAEE;AAAK,aAAS,EAAC;AAAf,kBACE;AAAK,aAAS,EAAC;AAAf,q4CADF,CAFF,CAlBF,eAwEE;AAAK,aAAS,EAAC;AAAf,kBACE;AAAI,aAAS,EAAC;AAAd,yBADF,eAEE;AAAK,aAAS,EAAC;AAAf,kBACE;AAAI,aAAS,EAAC;AAAd,kBACE,uHADF,eAEE,yJAFF,eAME,0KANF,eAUE,4SAVF,eAgBE,6LAhBF,eAoBE,4VAKK,oGALL,CApBF,CADF,CAFF,CAxEF,CADF;AA4GD;;AAED,iEAAenB,oBAAf","sources":["webpack://rm-react-dashboard-app/./ClientApp/Components/advent/challenges/AdventChallengeDay3b.tsx"],"sourcesContent":["import React, { useContext } from \"react\";\nimport \"../Advent.scss\";\nimport AdventContext from \"../AdventContext\";\nimport {\n  adventDay2Data,\n  adventDay3Data,\n  IAdventDay2Data,\n} from \"../data/AdventDataSource\";\n\nfunction AdventChallengeDay3b() {\n  const determineCommonBit = (\n    inputData: string[],\n    mostCommon: boolean,\n    resultBinary: string = \"\"\n  ): string => {\n    console.log(inputData, mostCommon, resultBinary);\n\n    if (inputData.length == 1) {\n      resultBinary += inputData[0];\n      return resultBinary;\n    }\n\n    const zeroMap: string[] = [];\n    const oneMap: string[] = [];\n    inputData.map((value, index) => {\n      value.startsWith(\"0\") ? zeroMap.push(value) : oneMap.push(value);\n    });\n\n    if (\n      (mostCommon === true && oneMap.length >= zeroMap.length) ||\n      (mostCommon === false && oneMap.length < zeroMap.length)\n    ) {\n      resultBinary += \"1\";\n      return determineCommonBit(\n        oneMap.map((value) => value.substring(1)),\n        mostCommon,\n        resultBinary\n      );\n    }\n\n    resultBinary += \"0\";\n    return determineCommonBit(\n      zeroMap.map((value) => value.substring(1)),\n      mostCommon,\n      resultBinary\n    );\n  };\n\n  const solvePuzzle = (inputData: string[]) => {\n    const oxygenGeneratorRating = determineCommonBit(inputData, true);\n    const co2ScrubberRating = determineCommonBit(inputData, false);\n    const result =\n      parseInt(oxygenGeneratorRating, 2) * parseInt(co2ScrubberRating, 2);\n    return [\n      parseInt(oxygenGeneratorRating, 2),\n      parseInt(co2ScrubberRating, 2),\n      result,\n    ];\n  };\n  const [oxygenGeneratorRating, co2ScrubberRating, result] =\n    solvePuzzle(adventDay3Data);\n  return (\n    <div className=\"flex-fill\">\n      <div className=\"d-flex flex-column\">\n        <h5 className=\"mb-2\">Problem Input:</h5>\n        <div className=\"px-3 small\">\n          <p className=\"small data-box\">{adventDay3Data.join(\", \")}</p>\n        </div>\n      </div>\n      <div className=\"d-flex flex-column\">\n        <h5 className=\"mb-2\">Problem Solution:</h5>\n        <div className=\"px-3\">\n          <p className=\"color-code-green\">\n            {\" \"}\n            The Oxygen Generator Rating is: {oxygenGeneratorRating}, while the\n            C02 Scrubber Rating is: {co2ScrubberRating}, giving us the result of{\" \"}\n            {result}.\n          </p>\n        </div>\n      </div>\n      <div className=\"d-flex flex-column mb-3\">\n        <h5 className=\"mb-2\">Code:</h5>\n        <div className=\"px-3\">\n          <pre className=\"color-code-green small code mb-0\">{`const solvePuzzle = (inputData: string[]) => {\n    const oxygenGeneratorRating = determineCommonBit(inputData, true);\n    const co2ScrubberRating = determineCommonBit(inputData, false);\n    const result =\n      parseInt(oxygenGeneratorRating, 2) * parseInt(co2ScrubberRating, 2);\n    return [\n      parseInt(oxygenGeneratorRating, 2),\n      parseInt(co2ScrubberRating, 2),\n      result,\n    ];\n  };\n          \n const determineCommonBit = (\n    inputData: string[],\n    mostCommon: boolean,\n    resultBinary: string = \"\"\n  ): string => {\n    console.log(inputData, mostCommon, resultBinary);\n\n    if (inputData.length == 1) {\n      resultBinary += inputData[0];\n      return resultBinary;\n    }\n\n    const zeroMap: string[] = [];\n    const oneMap: string[] = [];\n    inputData.map((value, index) => {\n      value.startsWith(\"0\") ? zeroMap.push(value) : oneMap.push(value);\n    });\n\n    if (\n      (mostCommon === true && oneMap.length >= zeroMap.length) ||\n      (mostCommon === false && oneMap.length < zeroMap.length)\n    ) {\n      resultBinary += \"1\";\n      return determineCommonBit(\n        oneMap.map((value) => value.substring(1)),\n        mostCommon,\n        resultBinary\n      );\n    }\n\n    resultBinary += \"0\";\n    return determineCommonBit(\n      zeroMap.map((value) => value.substring(1)),\n      mostCommon,\n      resultBinary\n    );\n  };`}</pre>\n        </div>\n      </div>\n      <div className=\"d-flex flex-column\">\n        <h5 className=\"mb-2\">Code Explanation:</h5>\n        <div className=\"px-3\">\n          <ul className=\"color-code-green small code mb-0\">\n            <li>Take in binary code input array as :{`<string>[]`}.</li>\n            <li>\n              Use my recursive function to get the Oxygen Generator Rating and\n              the CO2 Scrubber Rating.\n            </li>\n            <li>\n              Loop over each binary number, separating the array into a 0 array\n              and 1 array based on the leading number.\n            </li>\n            <li>\n              Build the result binary bit by bit as I remove the leading bit of\n              each binary and then pass an array of the most common values into\n              my recursive function to continually cut out the least/most common\n              bits until we get to 1 binary number.\n            </li>\n            <li>\n              Parse the binary values for Oxygen Generator Rating and CO2\n              Scrubber Rating into numbers then multiply them to get the answer\n            </li>\n            <li>\n              This code loops over the array initially twice, one for oxygen and\n              again for co2. It then breaks the array into roughly half based on\n              which bit is most/least common. Then it does it again, looking at\n              the half it broke off. That leads me to believe that this function\n              is <b>2Nlog(N) according to Big O notation.</b>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AdventChallengeDay3b;\n"],"names":["React","adventDay3Data","AdventChallengeDay3b","determineCommonBit","inputData","mostCommon","resultBinary","console","log","length","zeroMap","oneMap","map","value","index","startsWith","push","substring","solvePuzzle","oxygenGeneratorRating","co2ScrubberRating","result","parseInt","join"],"sourceRoot":""}