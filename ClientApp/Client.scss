@use "sass:math";
//global variables
$coding-green-color: rgb(0, 255, 0);
$coding-green-color-hover: rgb(0, 150, 0);
$coding-red-color: #ff0000;
$coding-red-color-hover:#950000;
$background-color:#222;
$breakpoint-sm:576px;
$breakpoint-lg:992px;
$breakpoint-xl:1200px;

//General Styling
@font-face {
  font-family: "IBMPlexMono";
  src: local("IBMPlexMono"),
    url("/public/sassAssets/fonts/IBMPlexMono-Regular.ttf") format("truetype");
}
@import "../node_modules/bootstrap/scss/bootstrap";

body {
  background-color: $background-color !important;
  color: $coding-green-color;
  font-family: IBMPlexMono, serif !important;
  
}
#app {
  min-height: 100vh;
  max-height: 100vh;
  overflow-y:auto;
  display: flex;
  flex-direction: column;
}

hr{
  color:$coding-green-color;
}

//bootstrap extensions
.container {
  @extend .container;
  color: $coding-green-color;
  flex-grow: 1;
}
.btn-link{
  @extend .btn-link;
  color: $coding-green-color;
  padding-left:0;
  padding-right:0;
  &:hover{
    color:$coding-green-color-hover;
  }
}

//custom colors
.color-code-green{
  color:$coding-green-color;
}

//text classes
.text-code-green {
  @extend .color-code-green
}

//custom borders
.border-dashed{
  border-style: dashed;
}
.border-code-green{
  border-color:$coding-green-color;
}

//custom bg

.bg-code-green{
  background-color: $coding-green-color;
  color:$background-color;
}

.bg-code-red{
  background-color: $coding-red-color;
  color:white;
}

//custom buttons
.btn-code-green{
  @extend .btn-success;
  background-color: $coding-green-color;
  
  &:hover{
    background-color: $coding-green-color-hover;
  }
}

.btn-outline-code-green{
  @extend .btn-outline-success;
  border-color: $coding-green-color;
  color: $coding-green-color;
  background-color: transparent;

  &:hover{
    background-color: $coding-green-color;
    color: $background-color !important;
  }
}


@media (min-width: $breakpoint-lg) {

  //starfield background.
  //Inspired and edited from https://codepen.io/inegoita/pen/wLxObg

  $stars: 350;         // Number of start per layer
  $depth: 300;         // Depth between star layers
  $speed: 10s;          // Number of seconds to transition between layers
  $width: 7500;        // Width of the starfield
  $height: 5000;        // Height of the starfield


  .stars {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 8px;
    height: 8px;
    $box-shadow: ();
    @for $i from 0 through $stars {
      $box-shadow: $box-shadow, (random($width)-(math.div($width,2)) + px) (random($height)-(math.div($height,2)) + px) hsl(90,0%,75%);
    }
    animation: fly $speed ease-out infinite alternate;
    transform-style: preserve-3d;

    &:after {
      content: "";
      position: absolute;
      width: inherit;
      height: inherit;
      box-shadow: $box-shadow;
    }
    &:after {
      transform: translateZ(-$depth * 2 + px);
      animation: fade $speed ease-out infinite alternate;
    }
  }

  @keyframes fly {
    from {
      transform: translateZ(0px) perspective(300px);
    }
    to {
      transform: translateZ($depth) perspective(0px);
    }
  }
  @keyframes fade {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
}